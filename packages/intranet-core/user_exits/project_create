#!/usr/bin/perl

# --------------------------------------------------------
#
# project_create
#
# ]project-open[ ERP/Project Management System
# (c) 2006 ]project-open[, frank.bergmann@project-open.com
# All rights reserved.
# --------------------------------------------------------


# --------------------------------------------------------
# Check for libraries (below) in the local directory
use FindBin;
use lib $FindBin::Bin;


# --------------------------------------------------------
# Include constants for all user exits
#
# Customize common_constants to set database name and user.
#
require common_constants;
use DBI;


# --------------------------------------------------------
# Usage...
$usage = "
Usage:
	project_create <project_id>

This user exit is called every time after a new project
has been created successfully in ]po[.

Arguments:
	<project_id> is the OpenACS project_id.\n
";


# --------------------------------------------------------
# Check and extract arguments from the command line.
# project_id is an integer that is used to access user
# information from the parties, persons and users tables.
die "project_create: Invalid number of arguments.\n$usage" if (0 != $#ARGV);
$project_id = $ARGV[0];


# --------------------------------------------------------
# Write a debug line to the log file
open(L, ">> $logfile") || die "project_create: Couldn't open $logfile";
print L "$date: project_create $project_id\n";


# --------------------------------------------------------
# Establish the database connection
# The parameters are defined in common_constants.pm
$dbh = DBI->connect($db_datasource, $db_username, $db_pwd) ||
    die "project_create: Unable to connect to database.\n";


# --------------------------------------------------------
# Prepare a SQL statement for execution.
# cc_users is a view that contains everything about a user
$sth = $dbh->prepare("
	SELECT	p.*
	FROM	im_projects p
	WHERE	p.project_id = $project_id
");

# Execute the statement in the database
$sth->execute();


# --------------------------------------------------------
# Retrieve the returned rows of data. There should be
# exactly one returned row.
$numres = $sth->rows;
die "project_create: Exactly 1 row expected but retreived $numres.\n" if (1 != $numres);


# --------------------------------------------------------
# Extract the user information from the returned row.

my $row = $sth->fetchrow_hashref;

my $project_name                 = $row->{project_name};
my $project_nr                   = $row->{project_nr};
my $project_path                 = $row->{project_path};
my $parent_id                    = $row->{parent_id};
my $company_id                   = $row->{company_id};
my $project_type_id              = $row->{project_type_id};
my $project_status_id            = $row->{project_status_id};
my $end_date                     = $row->{end_date};
my $start_date                   = $row->{start_date};
my $description                  = $row->{description};
my $billing_type_id              = $row->{billing_type_id};
my $note                         = $row->{note};
my $project_lead_id              = $row->{project_lead_id};
my $supervisor_id                = $row->{supervisor_id};
my $requires_report_p            = $row->{requires_report_p};
my $project_budget               = $row->{project_budget};
my $company_project_nr           = $row->{company_project_nr};
my $company_contact_id           = $row->{company_contact_id};
my $source_language_id           = $row->{source_language_id};
my $subject_area_id              = $row->{subject_area_id};
my $expected_quality_id          = $row->{expected_quality_id};
my $final_company                = $row->{final_company};
my $corporate_sponsor            = $row->{corporate_sponsor};
my $percent_completed            = $row->{percent_completed};
my $on_track_status_id           = $row->{on_track_status_id};
my $project_budget_currency      = $row->{project_budget_currency};
my $project_budget_hours         = $row->{project_budget_hours};
my $cost_quotes_cache            = $row->{cost_quotes_cache};
my $cost_invoices_cache          = $row->{cost_invoices_cache};
my $cost_timesheet_planned_cache = $row->{cost_timesheet_planned_cache};
my $cost_purchase_orders_cache   = $row->{cost_purchase_orders_cache};
my $cost_bills_cache             = $row->{cost_bills_cache};
my $cost_timesheet_logged_cache  = $row->{cost_timesheet_logged_cache};
my $template_p                   = $row->{template_p};
my $sort_order                   = $row->{sort_order};

$sth->finish;

# check for problems which may have terminated the fetch early
warn $DBI::errstr if $DBI::err;



# --------------------------------------------------------
#
#	Here goes your code!
#
#
print "project_id=$project_id, project_name=$project_name, start_date=$start_date, end_date=$end_date\n";




# --------------------------------------------------------
# Close the database connection
$dbh->disconnect ||
    warn "Disconnection failed: $DBI::errstr\n";


# --------------------------------------------------------
# Close open filehandles
close(L);


# --------------------------------------------------------
# Return a successful execution ("0"). Any other value
# indicates an error. Return code meaning still needs
# to be determined, so returning "1" is fine.
exit(0);
