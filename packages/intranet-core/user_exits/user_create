#!/usr/bin/perl

# --------------------------------------------------------
# ]project-open[ ERP/Project Management System
# (c) 2006 ]project-open[, frank.bergmann@project-open.com
# All rights reserved.
# --------------------------------------------------------


# --------------------------------------------------------
# Check for libraries (below) in the local directory
use FindBin;
use lib $FindBin::Bin;


# --------------------------------------------------------
# Include constants for all user exits
#
# Customize common_constants to set database name and user.
#
require common_constants;
use DBI;


# --------------------------------------------------------
# Usage...
$usage = "
Usage:
	user_create <user_id>

This user exit is called every time after a new user
has been created successfully in ]po[ or an existing
user has been updated.

Arguments:
	<user_id> is the OpenACS user_id.\n
";


# --------------------------------------------------------
# Check and extract arguments from the command line.
# user_id is an integer that is used to access user
# information from the parties, persons and users tables.
die "Invalid number of arguments.\n$usage" if (0 != $#ARGV);
$user_id = $ARGV[0];


# --------------------------------------------------------
# Write a debug line to the log file
open(L, ">> $logfile") || die "user_create: Couldn't open $logfile";
print L "$date: user_create $user_id\n";


# --------------------------------------------------------
# Establish the database connection
# The parameters are defined in common_constants.pm
$dbh = DBI->connect($db_datasource, $db_username, $db_pwd) ||
    die "Unable to connect to database.\n";


# --------------------------------------------------------
# Prepare a SQL statement for execution.
# cc_users is a view that contains everything about a user
$sth = $dbh->prepare("
	SELECT	u.*,
		pa.*,
		pe.*
	FROM
		users u,
		parties pa,
		persons pe
	WHERE
		u.user_id = $user_id
		and pa.party_id = u.user_id
		and pe.person_id = u.user_id
");

# Execute the statement in the database
$sth->execute();


# --------------------------------------------------------
# Retrieve the returned rows of data. There should be
# exactly one returned row.
$numres = $sth->rows;
die "Exactly 1 row expected but retreived $numres.\n" if (1 != $numres);


# --------------------------------------------------------
# Extract the user information from the returned row.
my $row = $sth->fetchrow_hashref;

my $email = $row->{email};
my $url = $row->{url};
my $first_names = $row->{first_names};
my $last_name = $row->{last_name};
my $username = $row->{username};
my $password = $row->{password};
my $salt = $row->{salt};
my $member_state = $row->{member_state};

$sth->finish;

# check for problems which may have terminated the fetch early
warn $DBI::errstr if $DBI::err;



# --------------------------------------------------------
#
#	Here goes your code!
#
#
print "user_id=$user_id, email=$email, url=$url, first=$first_names, last=$last_name, username=$username, state=$member_state\n";
print L "$date: user_create: user_id=$user_id, email=$email, url=$url, first=$first_names, last=$last_name, username=$username, state=$member_state\n";

system "cd /opt/ophelia/workflow/_wf; ./create_user.rb client1 $email";




# --------------------------------------------------------
# Close the database connection
$dbh->disconnect ||
    warn "Disconnection failed: $DBI::errstr\n";


# --------------------------------------------------------
# Close open filehandles
close(L);


# --------------------------------------------------------
# Return a successful execution ("0"). Any other value
# indicates an error. Return code meaning still needs
# to be determined, so returning "1" is fine.
exit(0);
