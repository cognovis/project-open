# --------------------------------------------------------
# generate-cvs-acl-group-conf.perl
# Generate the 'group' configuration file for a CVS with ACL
# extensions based on information from ]project-open[ via
# the REST Web-Service.
# 
# (c) 2010 ]project-open[
# Author: Frank Bergmann
#
# CVS with ACL extensions requires three configuration files
# in its CVSROOT directory:
#	- password	Hashed passwords for every user
#	- access	The list of repositories and permission
#			per group
#	- group		A list of groups, follwed by the users
#			belonging to each group
#
# Of these files, "access" and "password" are managed manually.
# "Group" and "Password" are generated by this script based
# on information maintained in ]po[.
#
# --------------------------------------------------------

use ProjectOpen;
use Data::Dumper;


# --------------------------------------------------------
# Connection parameters:

# Debug: 0=silent, 9=very verbose
$debug = 4;

# Current date/time
my $now = `/bin/date +\%Y-\%m-\%d:\%H.\%M`;


# benbigboss/ben is a default user @ demo.project-open.net...
#
my $rest_server = "demo.project-open.net";
my $rest_email = "bbigboss\@tigerpond.com";
my $rest_password = "ben";


# Initialize a hash group_name => List of users#
# We will use this hash to generate the "groups" CVS ACL file.
my $group_user_hash = {};


# Create a generic access object to query the ]po[ HTTP server
#
ProjectOpen->new (
	host	=> $rest_server,
	email	=> $rest_email,
	password => $rest_password,
	debug => $debug
);


# -------------------------------------------------------
# Get the list of users with a "cvs_user" field which is not null.
# As a result we will receive a hash reference with user_id -> <some reference>
# We can then take the user_id to get more information about that user.
#
my $user_list = ProjectOpen->get_object_list("user", "cvs_user is not null and cvs_user != 'anonymous'");
print STDERR Dumper($user_list) if ($debug > 5);


# -------------------------------------------------------
# Get the group memberships for each user
#
for my $user_id (keys %$user_list) {

    # Get more information about the user
    my $user_hash = ProjectOpen->get_object("user", $user_id);
    print STDERR Dumper($user_hash) if ($debug > 5);

    # Extract some variables from hash
    my $username = $user_hash->{username};
    my $cvs_user = $user_hash->{cvs_user};
    my $first_names = $user_hash->{first_names};
    my $last_name = $user_hash->{last_name};
    print STDERR "generate-cvs-acl-group-conf.perl: Found user '$first_names $last_name' with user_id=$user_id, cvs_user=$cvs_user\n" if ($debug > 0);
 
    # Get the list of group memberships of the user
    my $group_array = ProjectOpen->get_group_memberships($user_id);
    print STDERR Dumper($group_array) if ($debug > 5);

    # Loop through the list of groups
    my $array_size = @{$group_array};
    for (my $count = 0; $count < $array_size; $count++) {

	# Access the hash at the position $count of the array
	my $val_hash = $group_array->[$count];
	# The hash has a value "group_id" which we need.
	my $group_id = $val_hash->{group_id};

	# Skip special groups ("The Public" and "Registered Users")
	# with negative group_id
        next if ($group_id < 0);

	# Get the details of the group
	my $group_hash = ProjectOpen->get_object("group", $group_id);
	my $group_name = $group_hash->{group_name};
	my $group_object_type = $group_hash->{object_type};

	# We are looking for groups with group_type = "im_cvs_group".
	# We have created this special group_type in ]po[ to separate
	# these groups from "im_profile" and other groups.
        next if ($group_object_type ne "im_cvs_group");

	# Add the username to the group-user-hash
	print STDERR "generate-cvs-acl-group-conf.perl: group_id=$group_id, group_name=$group_name\n" if ($debug > 0);
        my $user_list = "";
        if (exists $group_user_hash->{$group_name}) {
	    $user_list = $group_user_hash->{$group_name};
	}
	if ("" ne $user_list) { $user_list = $user_list.", "; }
        $user_list = $user_list.$cvs_user;
        $group_user_hash->{$group_name} = $user_list;
    }
}

# ---------------------------------------------------------------
# Generate the file - only on STDOUT...
print "#
# CVS ACL group file
# Automatically generated on $now
# by ]project-open[ generate-cvs-acl-group-conf.perl
#
# Please do not edit this file. Instead, please go to your ]po[
# server and change the configuration there.
#\n";

# Counter for group ID. The ID isn't used anywhere...
my $group_id = 1;

# Loop through all groups and print out a line suitable for the
# groups file.
for my $group_name (sort(keys %$group_user_hash)) {
    my $user_list = $group_user_hash->{$group_name};
    print "$group_name:x:$group_id:$user_list\n";
    $group_id++;
}

exit 0;
